upstream {YOUR_SERVER_HOST} {
  keepalive 100;
  server 127.0.0.1:20000;
  # server unix:/tmp/sanic.sock;
}

server {
  server_name {YOUR_SERVER_HOST};
  # listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;


  # React app (base URL)
  location / {
    root /var/www/react_app;
    index  index.html index.htm;
    try_files $uri $uri/ /index.html =404;
  }


  # Ghost
  client_max_body_size 50m;
  root /var/www/blog/system/nginx-root; # Used for acme.sh SSL verification (https://acme.sh)

  location ^~ /blog/ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_pass http://127.0.0.1:2368;
    proxy_redirect off;
  }

  location ~ /.well-known {
    allow all;
  }


  # Sanic
  location /api/ {
    proxy_pass http://$server_name;
    # Allow fast streaming HTTP/1.1 pipes (keep-alive, unbuffered)
    proxy_http_version 1.1;
    proxy_request_buffering off;
    proxy_buffering off;
    # Proxy forwarding (password configured in app.config.FORWARDED_SECRET)
    proxy_set_header forwarded "$proxy_forwarded;secret=\"dhPipfTpfHwH7JsTkHcNPTihvbTnegzV\"";
    # Allow websockets and keep-alive (avoid connection: close)
    proxy_set_header connection "upgrade";
    proxy_set_header upgrade $http_upgrade;
  }


  # default favicon
  location = /favicon.ico {
    alias /var/www/favicon.gif;
  }


  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/{YOUR_SERVER_HOST}/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/{YOUR_SERVER_HOST}/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}


# TODO: if is evil
# https://wordpress.org/support/article/nginx/
# http://wiki.nginx.org/IfIsEvil
server {
  server_name {YOUR_SERVER_HOST};


  # CertBot
  if ($host = {YOUR_SERVER_HOST}) {
    return 301 https://$host$request_uri;
  } # managed by Certbot

  listen 80;
  return 404; # managed by Certbot
}


# Redirect all HTTP to HTTPS with no-WWW
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name ~^(?:www\.)?(.*)$;
  return 301 https://$1$request_uri;
}


# Redirect WWW to no-WWW
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name ~^www\.(.*)$;
  return 301 $scheme://$1$request_uri;
}
